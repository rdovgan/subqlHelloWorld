declare const _default: {
    /**
     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup5: pallet_balances::AccountData<Balance>
     **/
    PalletBalancesAccountData: {
        free: string;
        reserved: string;
        miscFrozen: string;
        feeFrozen: string;
    };
    /**
     * Lookup7: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU64: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup11: sp_runtime::generic::digest::Digest<primitive_types::H256>
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup13: sp_runtime::generic::digest::DigestItem<primitive_types::H256>
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            ChangesTrieRoot: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            ChangesTrieSignal: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup15: sp_runtime::generic::digest::ChangesTrieSignal
     **/
    SpRuntimeDigestChangesTrieSignal: {
        _enum: {
            NewConfiguration: string;
        };
    };
    /**
     * Lookup17: sp_core::changes_trie::ChangesTrieConfiguration
     **/
    SpCoreChangesTrieChangesTrieConfiguration: {
        digestInterval: string;
        digestLevels: string;
    };
    /**
     * Lookup19: frame_system::EventRecord<node_runtime::Event, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup21: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: string;
            ExtrinsicFailed: string;
            CodeUpdated: string;
            NewAccount: string;
            KilledAccount: string;
            Remarked: string;
        };
    };
    /**
     * Lookup22: frame_support::weights::DispatchInfo
     **/
    FrameSupportWeightsDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup23: frame_support::weights::DispatchClass
     **/
    FrameSupportWeightsDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup24: frame_support::weights::Pays
     **/
    FrameSupportWeightsPays: {
        _enum: string[];
    };
    /**
     * Lookup25: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: {
                index: string;
                error: string;
            };
            ConsumerRemaining: string;
            NoProviders: string;
            Token: string;
            Arithmetic: string;
        };
    };
    /**
     * Lookup26: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup27: sp_runtime::ArithmeticError
     **/
    SpRuntimeArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup28: pallet_utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: string;
            BatchCompleted: string;
            ItemCompleted: string;
            DispatchedAs: string;
        };
    };
    /**
     * Lookup31: pallet_indices::pallet::Event<T>
     **/
    PalletIndicesEvent: {
        _enum: {
            IndexAssigned: string;
            IndexFreed: string;
            IndexFrozen: string;
        };
    };
    /**
     * Lookup32: pallet_balances::pallet::Event<T, I>
     **/
    PalletBalancesEvent: {
        _enum: {
            Endowed: string;
            DustLost: string;
            Transfer: string;
            BalanceSet: string;
            Reserved: string;
            Unreserved: string;
            ReserveRepatriated: string;
            Deposit: string;
            Withdraw: string;
            Slashed: string;
        };
    };
    /**
     * Lookup33: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup34: pallet_election_provider_multi_phase::pallet::Event<T>
     **/
    PalletElectionProviderMultiPhaseEvent: {
        _enum: {
            SolutionStored: string;
            ElectionFinalized: string;
            Rewarded: string;
            Slashed: string;
            SignedPhaseStarted: string;
            UnsignedPhaseStarted: string;
        };
    };
    /**
     * Lookup35: pallet_election_provider_multi_phase::ElectionCompute
     **/
    PalletElectionProviderMultiPhaseElectionCompute: {
        _enum: string[];
    };
    /**
     * Lookup38: pallet_staking::pallet::pallet::Event<T>
     **/
    PalletStakingPalletEvent: {
        _enum: {
            EraPaid: string;
            Rewarded: string;
            Slashed: string;
            OldSlashingReportDiscarded: string;
            StakersElected: string;
            Bonded: string;
            Unbonded: string;
            Withdrawn: string;
            Kicked: string;
            StakingElectionFailed: string;
            Chilled: string;
            PayoutStarted: string;
        };
    };
    /**
     * Lookup39: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: string;
        };
    };
    /**
     * Lookup40: pallet_democracy::pallet::Event<T>
     **/
    PalletDemocracyEvent: {
        _enum: {
            Proposed: string;
            Tabled: string;
            ExternalTabled: string;
            Started: string;
            Passed: string;
            NotPassed: string;
            Cancelled: string;
            Executed: string;
            Delegated: string;
            Undelegated: string;
            Vetoed: string;
            PreimageNoted: string;
            PreimageUsed: string;
            PreimageInvalid: string;
            PreimageMissing: string;
            PreimageReaped: string;
            Blacklisted: string;
        };
    };
    /**
     * Lookup42: pallet_democracy::vote_threshold::VoteThreshold
     **/
    PalletDemocracyVoteThreshold: {
        _enum: string[];
    };
    /**
     * Lookup43: pallet_collective::pallet::Event<T, I>
     **/
    PalletCollectiveEvent: {
        _enum: {
            Proposed: string;
            Voted: string;
            Approved: string;
            Disapproved: string;
            Executed: string;
            MemberExecuted: string;
            Closed: string;
        };
    };
    /**
     * Lookup45: pallet_elections_phragmen::pallet::Event<T>
     **/
    PalletElectionsPhragmenEvent: {
        _enum: {
            NewTerm: string;
            EmptyTerm: string;
            ElectionError: string;
            MemberKicked: string;
            Renounced: string;
            CandidateSlashed: string;
            SeatHolderSlashed: string;
        };
    };
    /**
     * Lookup48: pallet_membership::pallet::Event<T, I>
     **/
    PalletMembershipEvent: {
        _enum: string[];
    };
    /**
     * Lookup49: pallet_grandpa::pallet::Event
     **/
    PalletGrandpaEvent: {
        _enum: {
            NewAuthorities: string;
            Paused: string;
            Resumed: string;
        };
    };
    /**
     * Lookup52: sp_finality_grandpa::app::Public
     **/
    SpFinalityGrandpaAppPublic: string;
    /**
     * Lookup53: sp_core::ed25519::Public
     **/
    SpCoreEd25519Public: string;
    /**
     * Lookup54: pallet_treasury::pallet::Event<T, I>
     **/
    PalletTreasuryEvent: {
        _enum: {
            Proposed: string;
            Spending: string;
            Awarded: string;
            Rejected: string;
            Burnt: string;
            Rollover: string;
            Deposit: string;
        };
    };
    /**
     * Lookup55: pallet_contracts::pallet::Event<T>
     **/
    PalletContractsEvent: {
        _enum: {
            Instantiated: {
                deployer: string;
                contract: string;
            };
            Terminated: {
                contract: string;
                beneficiary: string;
            };
            CodeStored: {
                codeHash: string;
            };
            ScheduleUpdated: {
                version: string;
            };
            ContractEmitted: {
                contract: string;
                data: string;
            };
            CodeRemoved: {
                codeHash: string;
            };
        };
    };
    /**
     * Lookup56: pallet_sudo::pallet::Event<T>
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: string;
            KeyChanged: string;
            SudoAsDone: string;
        };
    };
    /**
     * Lookup57: pallet_im_online::pallet::Event<T>
     **/
    PalletImOnlineEvent: {
        _enum: {
            HeartbeatReceived: string;
            AllGood: string;
            SomeOffline: string;
        };
    };
    /**
     * Lookup58: pallet_im_online::sr25519::app_sr25519::Public
     **/
    PalletImOnlineSr25519AppSr25519Public: string;
    /**
     * Lookup59: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup62: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingExposure: {
        total: string;
        own: string;
        others: string;
    };
    /**
     * Lookup65: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingIndividualExposure: {
        who: string;
        value: string;
    };
    /**
     * Lookup66: pallet_offences::pallet::Event
     **/
    PalletOffencesEvent: {
        _enum: {
            Offence: string;
        };
    };
    /**
     * Lookup68: pallet_identity::pallet::Event<T>
     **/
    PalletIdentityEvent: {
        _enum: {
            IdentitySet: string;
            IdentityCleared: string;
            IdentityKilled: string;
            JudgementRequested: string;
            JudgementUnrequested: string;
            JudgementGiven: string;
            RegistrarAdded: string;
            SubIdentityAdded: string;
            SubIdentityRemoved: string;
            SubIdentityRevoked: string;
        };
    };
    /**
     * Lookup69: pallet_society::pallet::Event<T, I>
     **/
    PalletSocietyEvent: {
        _enum: {
            Founded: string;
            Bid: string;
            Vouch: string;
            AutoUnbid: string;
            Unbid: string;
            Unvouch: string;
            Inducted: string;
            SuspendedMemberJudgement: string;
            CandidateSuspended: string;
            MemberSuspended: string;
            Challenged: string;
            Vote: string;
            DefenderVote: string;
            NewMaxMembers: string;
            Unfounded: string;
            Deposit: string;
        };
    };
    /**
     * Lookup70: pallet_recovery::pallet::Event<T>
     **/
    PalletRecoveryEvent: {
        _enum: {
            RecoveryCreated: string;
            RecoveryInitiated: string;
            RecoveryVouched: string;
            RecoveryClosed: string;
            AccountRecovered: string;
            RecoveryRemoved: string;
        };
    };
    /**
     * Lookup71: pallet_vesting::pallet::Event<T>
     **/
    PalletVestingEvent: {
        _enum: {
            VestingUpdated: string;
            VestingCompleted: string;
        };
    };
    /**
     * Lookup72: pallet_scheduler::pallet::Event<T>
     **/
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: string;
            Canceled: string;
            Dispatched: string;
        };
    };
    /**
     * Lookup75: pallet_proxy::pallet::Event<T>
     **/
    PalletProxyEvent: {
        _enum: {
            ProxyExecuted: string;
            AnonymousCreated: string;
            Announced: string;
            ProxyAdded: string;
        };
    };
    /**
     * Lookup76: node_runtime::ProxyType
     **/
    NodeRuntimeProxyType: {
        _enum: string[];
    };
    /**
     * Lookup78: pallet_multisig::pallet::Event<T>
     **/
    PalletMultisigEvent: {
        _enum: {
            NewMultisig: string;
            MultisigApproval: string;
            MultisigExecuted: string;
            MultisigCancelled: string;
        };
    };
    /**
     * Lookup79: pallet_multisig::Timepoint<BlockNumber>
     **/
    PalletMultisigTimepoint: {
        height: string;
        index: string;
    };
    /**
     * Lookup80: pallet_bounties::pallet::Event<T>
     **/
    PalletBountiesEvent: {
        _enum: {
            BountyProposed: string;
            BountyRejected: string;
            BountyBecameActive: string;
            BountyAwarded: string;
            BountyClaimed: string;
            BountyCanceled: string;
            BountyExtended: string;
        };
    };
    /**
     * Lookup81: pallet_tips::pallet::Event<T>
     **/
    PalletTipsEvent: {
        _enum: {
            NewTip: string;
            TipClosing: string;
            TipClosed: string;
            TipRetracted: string;
            TipSlashed: string;
        };
    };
    /**
     * Lookup82: pallet_assets::pallet::Event<T, I>
     **/
    PalletAssetsEvent: {
        _enum: {
            Created: string;
            Issued: string;
            Transferred: string;
            Burned: string;
            TeamChanged: string;
            OwnerChanged: string;
            Frozen: string;
            Thawed: string;
            AssetFrozen: string;
            AssetThawed: string;
            Destroyed: string;
            ForceCreated: string;
            MetadataSet: string;
            MetadataCleared: string;
            ApprovedTransfer: string;
            ApprovalCancelled: string;
            TransferredApproved: string;
            AssetStatusChanged: string;
        };
    };
    /**
     * Lookup83: pallet_lottery::pallet::Event<T>
     **/
    PalletLotteryEvent: {
        _enum: {
            LotteryStarted: string;
            CallsUpdated: string;
            Winner: string;
            TicketBought: string;
        };
    };
    /**
     * Lookup85: pallet_gilt::pallet::Event<T>
     **/
    PalletGiltEvent: {
        _enum: {
            BidPlaced: string;
            BidRetracted: string;
            GiltIssued: string;
            GiltThawed: string;
        };
    };
    /**
     * Lookup86: pallet_uniques::pallet::Event<T, I>
     **/
    PalletUniquesEvent: {
        _enum: {
            Created: string;
            ForceCreated: string;
            Destroyed: string;
            Issued: string;
            Transferred: string;
            Burned: string;
            Frozen: string;
            Thawed: string;
            ClassFrozen: string;
            ClassThawed: string;
            OwnerChanged: string;
            TeamChanged: string;
            ApprovedTransfer: string;
            ApprovalCancelled: string;
            AssetStatusChanged: string;
            ClassMetadataSet: string;
            ClassMetadataCleared: string;
            MetadataSet: string;
            MetadataCleared: string;
            Redeposited: string;
            AttributeSet: string;
            AttributeCleared: string;
        };
    };
    /**
     * Lookup92: pallet_transaction_storage::pallet::Event<T>
     **/
    PalletTransactionStorageEvent: {
        _enum: {
            Stored: string;
            Renewed: string;
            ProofChecked: string;
        };
    };
    /**
     * Lookup93: pallet_bags_list::pallet::Event<T>
     **/
    PalletBagsListEvent: {
        _enum: {
            Rebagged: string;
        };
    };
    /**
     * Lookup94: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup97: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup100: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            fill_block: {
                ratio: string;
            };
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_changes_trie_config: {
                changesTrieConfig: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup105: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup106: frame_support::weights::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportWeightsPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup107: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup109: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup110: frame_support::weights::PerDispatchClass<T>
     **/
    FrameSupportWeightsPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup111: frame_support::weights::RuntimeDbWeight
     **/
    FrameSupportWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup112: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
    };
    /**
     * Lookup117: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup118: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
        };
    };
    /**
     * Lookup121: pallet_babe::pallet::Call<T>
     **/
    PalletBabeCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            plan_config_change: {
                config: string;
            };
        };
    };
    /**
     * Lookup122: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
     **/
    SpConsensusSlotsEquivocationProof: {
        offender: string;
        slot: string;
        firstHeader: string;
        secondHeader: string;
    };
    /**
     * Lookup123: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
     **/
    SpRuntimeHeader: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
    };
    /**
     * Lookup124: sp_runtime::traits::BlakeTwo256
     **/
    SpRuntimeBlakeTwo256: string;
    /**
     * Lookup125: sp_consensus_babe::app::Public
     **/
    SpConsensusBabeAppPublic: string;
    /**
     * Lookup127: sp_session::MembershipProof
     **/
    SpSessionMembershipProof: {
        session: string;
        trieNodes: string;
        validatorCount: string;
    };
    /**
     * Lookup128: sp_consensus_babe::digests::NextConfigDescriptor
     **/
    SpConsensusBabeDigestsNextConfigDescriptor: {
        _enum: {
            __Unused0: string;
            V1: {
                c: string;
                allowedSlots: string;
            };
        };
    };
    /**
     * Lookup130: sp_consensus_babe::AllowedSlots
     **/
    SpConsensusBabeAllowedSlots: {
        _enum: string[];
    };
    /**
     * Lookup131: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup133: pallet_authorship::pallet::Call<T>
     **/
    PalletAuthorshipCall: {
        _enum: {
            set_uncles: {
                newUncles: string;
            };
        };
    };
    /**
     * Lookup135: pallet_indices::pallet::Call<T>
     **/
    PalletIndicesCall: {
        _enum: {
            claim: {
                index: string;
            };
            transfer: {
                _alias: {
                    new_: string;
                };
                new_: string;
                index: string;
            };
            free: {
                index: string;
            };
            force_transfer: {
                _alias: {
                    new_: string;
                };
                new_: string;
                index: string;
                freeze: string;
            };
            freeze: {
                index: string;
            };
        };
    };
    /**
     * Lookup136: pallet_balances::pallet::Call<T, I>
     **/
    PalletBalancesCall: {
        _enum: {
            transfer: {
                dest: string;
                value: string;
            };
            set_balance: {
                who: string;
                newFree: string;
                newReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            transfer_keep_alive: {
                dest: string;
                value: string;
            };
            transfer_all: {
                dest: string;
                keepAlive: string;
            };
            force_unreserve: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup139: pallet_election_provider_multi_phase::pallet::Call<T>
     **/
    PalletElectionProviderMultiPhaseCall: {
        _enum: {
            submit_unsigned: {
                rawSolution: string;
                witness: string;
            };
            set_minimum_untrusted_score: {
                maybeNextScore: string;
            };
            set_emergency_election_result: {
                supports: string;
            };
            submit: {
                rawSolution: string;
                numSignedSubmissions: string;
            };
        };
    };
    /**
     * Lookup140: pallet_election_provider_multi_phase::RawSolution<node_runtime::NposSolution16>
     **/
    PalletElectionProviderMultiPhaseRawSolution: {
        solution: string;
        score: string;
        round: string;
    };
    /**
     * Lookup141: node_runtime::NposSolution16
     **/
    NodeRuntimeNposSolution16: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
    };
    /**
     * Lookup193: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
     **/
    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup197: sp_npos_elections::Support<sp_core::crypto::AccountId32>
     **/
    SpNposElectionsSupport: {
        total: string;
        voters: string;
    };
    /**
     * Lookup198: pallet_staking::pallet::pallet::Call<T>
     **/
    PalletStakingPalletCall: {
        _enum: {
            bond: {
                controller: string;
                value: string;
                payee: string;
            };
            bond_extra: {
                maxAdditional: string;
            };
            unbond: {
                value: string;
            };
            withdraw_unbonded: {
                numSlashingSpans: string;
            };
            validate: {
                prefs: string;
            };
            nominate: {
                targets: string;
            };
            chill: string;
            set_payee: {
                payee: string;
            };
            set_controller: {
                controller: string;
            };
            set_validator_count: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            increase_validator_count: {
                additional: string;
            };
            scale_validator_count: {
                factor: string;
            };
            force_no_eras: string;
            force_new_era: string;
            set_invulnerables: {
                invulnerables: string;
            };
            force_unstake: {
                stash: string;
                numSlashingSpans: string;
            };
            force_new_era_always: string;
            cancel_deferred_slash: {
                era: string;
                slashIndices: string;
            };
            payout_stakers: {
                validatorStash: string;
                era: string;
            };
            rebond: {
                value: string;
            };
            set_history_depth: {
                newHistoryDepth: string;
                eraItemsDeleted: string;
            };
            reap_stash: {
                stash: string;
                numSlashingSpans: string;
            };
            kick: {
                who: string;
            };
            set_staking_limits: {
                minNominatorBond: string;
                minValidatorBond: string;
                maxNominatorCount: string;
                maxValidatorCount: string;
                threshold: string;
            };
            chill_other: {
                controller: string;
            };
        };
    };
    /**
     * Lookup199: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
     **/
    PalletStakingRewardDestination: {
        _enum: {
            Staked: string;
            Stash: string;
            Controller: string;
            Account: string;
            None: string;
        };
    };
    /**
     * Lookup200: pallet_staking::ValidatorPrefs
     **/
    PalletStakingValidatorPrefs: {
        commission: string;
        blocked: string;
    };
    /**
     * Lookup205: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup206: node_runtime::SessionKeys
     **/
    NodeRuntimeSessionKeys: {
        grandpa: string;
        babe: string;
        imOnline: string;
        authorityDiscovery: string;
    };
    /**
     * Lookup207: sp_authority_discovery::app::Public
     **/
    SpAuthorityDiscoveryAppPublic: string;
    /**
     * Lookup208: pallet_democracy::pallet::Call<T>
     **/
    PalletDemocracyCall: {
        _enum: {
            propose: {
                proposalHash: string;
                value: string;
            };
            second: {
                proposal: string;
                secondsUpperBound: string;
            };
            vote: {
                refIndex: string;
                vote: string;
            };
            emergency_cancel: {
                refIndex: string;
            };
            external_propose: {
                proposalHash: string;
            };
            external_propose_majority: {
                proposalHash: string;
            };
            external_propose_default: {
                proposalHash: string;
            };
            fast_track: {
                proposalHash: string;
                votingPeriod: string;
                delay: string;
            };
            veto_external: {
                proposalHash: string;
            };
            cancel_referendum: {
                refIndex: string;
            };
            cancel_queued: {
                which: string;
            };
            delegate: {
                to: string;
                conviction: string;
                balance: string;
            };
            undelegate: string;
            clear_public_proposals: string;
            note_preimage: {
                encodedProposal: string;
            };
            note_preimage_operational: {
                encodedProposal: string;
            };
            note_imminent_preimage: {
                encodedProposal: string;
            };
            note_imminent_preimage_operational: {
                encodedProposal: string;
            };
            reap_preimage: {
                proposalHash: string;
                proposalLenUpperBound: string;
            };
            unlock: {
                target: string;
            };
            remove_vote: {
                index: string;
            };
            remove_other_vote: {
                target: string;
                index: string;
            };
            enact_proposal: {
                proposalHash: string;
                index: string;
            };
            blacklist: {
                proposalHash: string;
                maybeRefIndex: string;
            };
            cancel_proposal: {
                propIndex: string;
            };
        };
    };
    /**
     * Lookup209: pallet_democracy::vote::AccountVote<Balance>
     **/
    PalletDemocracyVoteAccountVote: {
        _enum: {
            Standard: {
                vote: string;
                balance: string;
            };
            Split: {
                aye: string;
                nay: string;
            };
        };
    };
    /**
     * Lookup211: pallet_democracy::conviction::Conviction
     **/
    PalletDemocracyConviction: {
        _enum: string[];
    };
    /**
     * Lookup212: pallet_collective::pallet::Call<T, I>
     **/
    PalletCollectiveCall: {
        _enum: {
            set_members: {
                newMembers: string;
                prime: string;
                oldCount: string;
            };
            execute: {
                proposal: string;
                lengthBound: string;
            };
            propose: {
                threshold: string;
                proposal: string;
                lengthBound: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
            close: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
            disapprove_proposal: {
                proposalHash: string;
            };
        };
    };
    /**
     * Lookup215: pallet_elections_phragmen::pallet::Call<T>
     **/
    PalletElectionsPhragmenCall: {
        _enum: {
            vote: {
                votes: string;
                value: string;
            };
            remove_voter: string;
            submit_candidacy: {
                candidateCount: string;
            };
            renounce_candidacy: {
                renouncing: string;
            };
            remove_member: {
                who: string;
                hasReplacement: string;
            };
            clean_defunct_voters: {
                numVoters: string;
                numDefunct: string;
            };
        };
    };
    /**
     * Lookup216: pallet_elections_phragmen::Renouncing
     **/
    PalletElectionsPhragmenRenouncing: {
        _enum: {
            Member: string;
            RunnerUp: string;
            Candidate: string;
        };
    };
    /**
     * Lookup217: pallet_membership::pallet::Call<T, I>
     **/
    PalletMembershipCall: {
        _enum: {
            add_member: {
                who: string;
            };
            remove_member: {
                who: string;
            };
            swap_member: {
                remove: string;
                add: string;
            };
            reset_members: {
                members: string;
            };
            change_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_prime: {
                who: string;
            };
            clear_prime: string;
        };
    };
    /**
     * Lookup218: pallet_grandpa::pallet::Call<T>
     **/
    PalletGrandpaCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            note_stalled: {
                delay: string;
                bestFinalizedBlockNumber: string;
            };
        };
    };
    /**
     * Lookup219: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
     **/
    SpFinalityGrandpaEquivocationProof: {
        setId: string;
        equivocation: string;
    };
    /**
     * Lookup220: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
     **/
    SpFinalityGrandpaEquivocation: {
        _enum: {
            Prevote: string;
            Precommit: string;
        };
    };
    /**
     * Lookup221: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrevote: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup222: finality_grandpa::Prevote<primitive_types::H256, N>
     **/
    FinalityGrandpaPrevote: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup223: sp_finality_grandpa::app::Signature
     **/
    SpFinalityGrandpaAppSignature: string;
    /**
     * Lookup224: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup227: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrecommit: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup228: finality_grandpa::Precommit<primitive_types::H256, N>
     **/
    FinalityGrandpaPrecommit: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup230: pallet_treasury::pallet::Call<T, I>
     **/
    PalletTreasuryCall: {
        _enum: {
            propose_spend: {
                value: string;
                beneficiary: string;
            };
            reject_proposal: {
                proposalId: string;
            };
            approve_proposal: {
                proposalId: string;
            };
        };
    };
    /**
     * Lookup231: pallet_contracts::pallet::Call<T>
     **/
    PalletContractsCall: {
        _enum: {
            call: {
                dest: string;
                value: string;
                gasLimit: string;
                data: string;
            };
            instantiate_with_code: {
                endowment: string;
                gasLimit: string;
                code: string;
                data: string;
                salt: string;
            };
            instantiate: {
                endowment: string;
                gasLimit: string;
                codeHash: string;
                data: string;
                salt: string;
            };
        };
    };
    /**
     * Lookup232: pallet_sudo::pallet::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup233: pallet_im_online::pallet::Call<T>
     **/
    PalletImOnlineCall: {
        _enum: {
            heartbeat: {
                heartbeat: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup234: pallet_im_online::Heartbeat<BlockNumber>
     **/
    PalletImOnlineHeartbeat: {
        blockNumber: string;
        networkState: string;
        sessionIndex: string;
        authorityIndex: string;
        validatorsLen: string;
    };
    /**
     * Lookup235: sp_core::offchain::OpaqueNetworkState
     **/
    SpCoreOffchainOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup239: pallet_im_online::sr25519::app_sr25519::Signature
     **/
    PalletImOnlineSr25519AppSr25519Signature: string;
    /**
     * Lookup240: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup241: pallet_identity::pallet::Call<T>
     **/
    PalletIdentityCall: {
        _enum: {
            add_registrar: {
                account: string;
            };
            set_identity: {
                info: string;
            };
            set_subs: {
                subs: string;
            };
            clear_identity: string;
            request_judgement: {
                regIndex: string;
                maxFee: string;
            };
            cancel_request: {
                regIndex: string;
            };
            set_fee: {
                index: string;
                fee: string;
            };
            set_account_id: {
                _alias: {
                    new_: string;
                };
                index: string;
                new_: string;
            };
            set_fields: {
                index: string;
                fields: string;
            };
            provide_judgement: {
                regIndex: string;
                target: string;
                judgement: string;
            };
            kill_identity: {
                target: string;
            };
            add_sub: {
                sub: string;
                data: string;
            };
            rename_sub: {
                sub: string;
                data: string;
            };
            remove_sub: {
                sub: string;
            };
            quit_sub: string;
        };
    };
    /**
     * Lookup242: pallet_identity::types::IdentityInfo<FieldLimit>
     **/
    PalletIdentityIdentityInfo: {
        additional: string;
        display: string;
        legal: string;
        web: string;
        riot: string;
        email: string;
        pgpFingerprint: string;
        image: string;
        twitter: string;
    };
    /**
     * Lookup278: pallet_identity::types::BitFlags<pallet_identity::types::IdentityField>
     **/
    PalletIdentityBitFlags: {
        _bitLength: number;
        Display: number;
        Legal: number;
        Web: number;
        Riot: number;
        Email: number;
        PgpFingerprint: number;
        Image: number;
        Twitter: number;
    };
    /**
     * Lookup279: pallet_identity::types::IdentityField
     **/
    PalletIdentityIdentityField: {
        _enum: string[];
    };
    /**
     * Lookup280: pallet_identity::types::Judgement<Balance>
     **/
    PalletIdentityJudgement: {
        _enum: {
            Unknown: string;
            FeePaid: string;
            Reasonable: string;
            KnownGood: string;
            OutOfDate: string;
            LowQuality: string;
            Erroneous: string;
        };
    };
    /**
     * Lookup281: pallet_society::pallet::Call<T, I>
     **/
    PalletSocietyCall: {
        _enum: {
            bid: {
                value: string;
            };
            unbid: {
                pos: string;
            };
            vouch: {
                who: string;
                value: string;
                tip: string;
            };
            unvouch: {
                pos: string;
            };
            vote: {
                candidate: string;
                approve: string;
            };
            defender_vote: {
                approve: string;
            };
            payout: string;
            found: {
                founder: string;
                maxMembers: string;
                rules: string;
            };
            unfound: string;
            judge_suspended_member: {
                who: string;
                forgive: string;
            };
            judge_suspended_candidate: {
                who: string;
                judgement: string;
            };
            set_max_members: {
                max: string;
            };
        };
    };
    /**
     * Lookup282: pallet_society::Judgement
     **/
    PalletSocietyJudgement: {
        _enum: string[];
    };
    /**
     * Lookup283: pallet_recovery::pallet::Call<T>
     **/
    PalletRecoveryCall: {
        _enum: {
            as_recovered: {
                account: string;
                call: string;
            };
            set_recovered: {
                lost: string;
                rescuer: string;
            };
            create_recovery: {
                friends: string;
                threshold: string;
                delayPeriod: string;
            };
            initiate_recovery: {
                account: string;
            };
            vouch_recovery: {
                lost: string;
                rescuer: string;
            };
            claim_recovery: {
                account: string;
            };
            close_recovery: {
                rescuer: string;
            };
            remove_recovery: string;
            cancel_recovered: {
                account: string;
            };
        };
    };
    /**
     * Lookup284: pallet_vesting::pallet::Call<T>
     **/
    PalletVestingCall: {
        _enum: {
            vest: string;
            vest_other: {
                target: string;
            };
            vested_transfer: {
                target: string;
                schedule: string;
            };
            force_vested_transfer: {
                source: string;
                target: string;
                schedule: string;
            };
            merge_schedules: {
                schedule1Index: string;
                schedule2Index: string;
            };
        };
    };
    /**
     * Lookup285: pallet_vesting::vesting_info::VestingInfo<Balance, BlockNumber>
     **/
    PalletVestingVestingInfo: {
        locked: string;
        perBlock: string;
        startingBlock: string;
    };
    /**
     * Lookup286: pallet_scheduler::pallet::Call<T>
     **/
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /**
     * Lookup288: pallet_proxy::pallet::Call<T>
     **/
    PalletProxyCall: {
        _enum: {
            proxy: {
                real: string;
                forceProxyType: string;
                call: string;
            };
            add_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxy: {
                delegate: string;
                proxyType: string;
                delay: string;
            };
            remove_proxies: string;
            anonymous: {
                proxyType: string;
                delay: string;
                index: string;
            };
            kill_anonymous: {
                spawner: string;
                proxyType: string;
                index: string;
                height: string;
                extIndex: string;
            };
            announce: {
                real: string;
                callHash: string;
            };
            remove_announcement: {
                real: string;
                callHash: string;
            };
            reject_announcement: {
                delegate: string;
                callHash: string;
            };
            proxy_announced: {
                delegate: string;
                real: string;
                forceProxyType: string;
                call: string;
            };
        };
    };
    /**
     * Lookup290: pallet_multisig::pallet::Call<T>
     **/
    PalletMultisigCall: {
        _enum: {
            as_multi_threshold_1: {
                otherSignatories: string;
                call: string;
            };
            as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                call: string;
                storeCall: string;
                maxWeight: string;
            };
            approve_as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                threshold: string;
                otherSignatories: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup293: pallet_bounties::pallet::Call<T>
     **/
    PalletBountiesCall: {
        _enum: {
            propose_bounty: {
                value: string;
                description: string;
            };
            approve_bounty: {
                bountyId: string;
            };
            propose_curator: {
                bountyId: string;
                curator: string;
                fee: string;
            };
            unassign_curator: {
                bountyId: string;
            };
            accept_curator: {
                bountyId: string;
            };
            award_bounty: {
                bountyId: string;
                beneficiary: string;
            };
            claim_bounty: {
                bountyId: string;
            };
            close_bounty: {
                bountyId: string;
            };
            extend_bounty_expiry: {
                bountyId: string;
                remark: string;
            };
        };
    };
    /**
     * Lookup294: pallet_tips::pallet::Call<T>
     **/
    PalletTipsCall: {
        _enum: {
            report_awesome: {
                reason: string;
                who: string;
            };
            retract_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            tip_new: {
                reason: string;
                who: string;
                tipValue: string;
            };
            tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                tipValue: string;
            };
            close_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            slash_tip: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup295: pallet_assets::pallet::Call<T, I>
     **/
    PalletAssetsCall: {
        _enum: {
            create: {
                id: string;
                admin: string;
                minBalance: string;
            };
            force_create: {
                id: string;
                owner: string;
                isSufficient: string;
                minBalance: string;
            };
            destroy: {
                id: string;
                witness: string;
            };
            mint: {
                id: string;
                beneficiary: string;
                amount: string;
            };
            burn: {
                id: string;
                who: string;
                amount: string;
            };
            transfer: {
                id: string;
                target: string;
                amount: string;
            };
            transfer_keep_alive: {
                id: string;
                target: string;
                amount: string;
            };
            force_transfer: {
                id: string;
                source: string;
                dest: string;
                amount: string;
            };
            freeze: {
                id: string;
                who: string;
            };
            thaw: {
                id: string;
                who: string;
            };
            freeze_asset: {
                id: string;
            };
            thaw_asset: {
                id: string;
            };
            transfer_ownership: {
                id: string;
                owner: string;
            };
            set_team: {
                id: string;
                issuer: string;
                admin: string;
                freezer: string;
            };
            set_metadata: {
                id: string;
                name: string;
                symbol: string;
                decimals: string;
            };
            clear_metadata: {
                id: string;
            };
            force_set_metadata: {
                id: string;
                name: string;
                symbol: string;
                decimals: string;
                isFrozen: string;
            };
            force_clear_metadata: {
                id: string;
            };
            force_asset_status: {
                id: string;
                owner: string;
                issuer: string;
                admin: string;
                freezer: string;
                minBalance: string;
                isSufficient: string;
                isFrozen: string;
            };
            approve_transfer: {
                id: string;
                delegate: string;
                amount: string;
            };
            cancel_approval: {
                id: string;
                delegate: string;
            };
            force_cancel_approval: {
                id: string;
                owner: string;
                delegate: string;
            };
            transfer_approved: {
                id: string;
                owner: string;
                destination: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup296: pallet_assets::types::DestroyWitness
     **/
    PalletAssetsDestroyWitness: {
        accounts: string;
        sufficients: string;
        approvals: string;
    };
    /**
     * Lookup297: pallet_lottery::pallet::Call<T>
     **/
    PalletLotteryCall: {
        _enum: {
            buy_ticket: {
                call: string;
            };
            set_calls: {
                calls: string;
            };
            start_lottery: {
                price: string;
                length: string;
                delay: string;
                repeat: string;
            };
            stop_repeat: string;
        };
    };
    /**
     * Lookup298: pallet_gilt::pallet::Call<T>
     **/
    PalletGiltCall: {
        _enum: {
            place_bid: {
                amount: string;
                duration: string;
            };
            retract_bid: {
                amount: string;
                duration: string;
            };
            set_target: {
                target: string;
            };
            thaw: {
                index: string;
            };
        };
    };
    /**
     * Lookup301: pallet_uniques::pallet::Call<T, I>
     **/
    PalletUniquesCall: {
        _enum: {
            create: {
                class: string;
                admin: string;
            };
            force_create: {
                class: string;
                owner: string;
                freeHolding: string;
            };
            destroy: {
                class: string;
                witness: string;
            };
            mint: {
                class: string;
                instance: string;
                owner: string;
            };
            burn: {
                class: string;
                instance: string;
                checkOwner: string;
            };
            transfer: {
                class: string;
                instance: string;
                dest: string;
            };
            redeposit: {
                class: string;
                instances: string;
            };
            freeze: {
                class: string;
                instance: string;
            };
            thaw: {
                class: string;
                instance: string;
            };
            freeze_class: {
                class: string;
            };
            thaw_class: {
                class: string;
            };
            transfer_ownership: {
                class: string;
                owner: string;
            };
            set_team: {
                class: string;
                issuer: string;
                admin: string;
                freezer: string;
            };
            approve_transfer: {
                class: string;
                instance: string;
                delegate: string;
            };
            cancel_approval: {
                class: string;
                instance: string;
                maybeCheckDelegate: string;
            };
            force_asset_status: {
                class: string;
                owner: string;
                issuer: string;
                admin: string;
                freezer: string;
                freeHolding: string;
                isFrozen: string;
            };
            set_attribute: {
                class: string;
                maybeInstance: string;
                key: string;
                value: string;
            };
            clear_attribute: {
                class: string;
                maybeInstance: string;
                key: string;
            };
            set_metadata: {
                class: string;
                instance: string;
                data: string;
                isFrozen: string;
            };
            clear_metadata: {
                class: string;
                instance: string;
            };
            set_class_metadata: {
                class: string;
                data: string;
                isFrozen: string;
            };
            clear_class_metadata: {
                class: string;
            };
        };
    };
    /**
     * Lookup302: pallet_uniques::types::DestroyWitness
     **/
    PalletUniquesDestroyWitness: {
        instances: string;
        instanceMetadatas: string;
        attributes: string;
    };
    /**
     * Lookup304: pallet_transaction_storage::pallet::Call<T>
     **/
    PalletTransactionStorageCall: {
        _enum: {
            store: {
                data: string;
            };
            renew: {
                block: string;
                index: string;
            };
            check_proof: {
                proof: string;
            };
        };
    };
    /**
     * Lookup305: sp_transaction_storage_proof::TransactionStorageProof
     **/
    SpTransactionStorageProofTransactionStorageProof: {
        chunk: string;
        proof: string;
    };
    /**
     * Lookup306: pallet_bags_list::pallet::Call<T>
     **/
    PalletBagsListCall: {
        _enum: {
            rebag: {
                dislocated: string;
            };
        };
    };
    /**
     * Lookup307: node_runtime::OriginCaller
     **/
    NodeRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            Void: string;
            __Unused4: string;
            __Unused5: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            __Unused9: string;
            __Unused10: string;
            __Unused11: string;
            Council: string;
            TechnicalCommittee: string;
        };
    };
    /**
     * Lookup308: frame_system::RawOrigin<sp_core::crypto::AccountId32>
     **/
    FrameSystemRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup309: pallet_collective::RawOrigin<sp_core::crypto::AccountId32, I>
     **/
    PalletCollectiveRawOrigin: {
        _enum: {
            Members: string;
            Member: string;
            _Phantom: string;
        };
    };
    /**
     * Lookup311: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup312: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup319: sp_consensus_babe::BabeEpochConfiguration
     **/
    SpConsensusBabeBabeEpochConfiguration: {
        c: string;
        allowedSlots: string;
    };
    /**
     * Lookup320: pallet_babe::pallet::Error<T>
     **/
    PalletBabeError: {
        _enum: string[];
    };
    /**
     * Lookup322: pallet_authorship::UncleEntryItem<BlockNumber, primitive_types::H256, sp_core::crypto::AccountId32>
     **/
    PalletAuthorshipUncleEntryItem: {
        _enum: {
            InclusionHeight: string;
            Uncle: string;
        };
    };
    /**
     * Lookup323: pallet_authorship::pallet::Error<T>
     **/
    PalletAuthorshipError: {
        _enum: string[];
    };
    /**
     * Lookup325: pallet_indices::pallet::Error<T>
     **/
    PalletIndicesError: {
        _enum: string[];
    };
    /**
     * Lookup327: pallet_balances::BalanceLock<Balance>
     **/
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /**
     * Lookup328: pallet_balances::Reasons
     **/
    PalletBalancesReasons: {
        _enum: string[];
    };
    /**
     * Lookup331: pallet_balances::ReserveData<ReserveIdentifier, Balance>
     **/
    PalletBalancesReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup333: pallet_balances::Releases
     **/
    PalletBalancesReleases: {
        _enum: string[];
    };
    /**
     * Lookup334: pallet_balances::pallet::Error<T, I>
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup336: pallet_transaction_payment::Releases
     **/
    PalletTransactionPaymentReleases: {
        _enum: string[];
    };
    /**
     * Lookup338: frame_support::weights::WeightToFeeCoefficient<Balance>
     **/
    FrameSupportWeightsWeightToFeeCoefficient: {
        coeffInteger: string;
        coeffFrac: string;
        negative: string;
        degree: string;
    };
    /**
     * Lookup339: pallet_election_provider_multi_phase::Phase<Bn>
     **/
    PalletElectionProviderMultiPhasePhase: {
        _enum: {
            Off: string;
            Signed: string;
            Unsigned: string;
            Emergency: string;
        };
    };
    /**
     * Lookup341: pallet_election_provider_multi_phase::ReadySolution<sp_core::crypto::AccountId32>
     **/
    PalletElectionProviderMultiPhaseReadySolution: {
        supports: string;
        score: string;
        compute: string;
    };
    /**
     * Lookup342: pallet_election_provider_multi_phase::RoundSnapshot<sp_core::crypto::AccountId32>
     **/
    PalletElectionProviderMultiPhaseRoundSnapshot: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup349: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, node_runtime::NposSolution16>
     **/
    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
        who: string;
        deposit: string;
        rawSolution: string;
        reward: string;
    };
    /**
     * Lookup350: pallet_election_provider_multi_phase::pallet::Error<T>
     **/
    PalletElectionProviderMultiPhaseError: {
        _enum: string[];
    };
    /**
     * Lookup351: pallet_staking::StakingLedger<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingStakingLedger: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        claimedRewards: string;
    };
    /**
     * Lookup353: pallet_staking::UnlockChunk<Balance>
     **/
    PalletStakingUnlockChunk: {
        value: string;
        era: string;
    };
    /**
     * Lookup354: pallet_staking::Nominations<sp_core::crypto::AccountId32>
     **/
    PalletStakingNominations: {
        targets: string;
        submittedIn: string;
        suppressed: string;
    };
    /**
     * Lookup355: pallet_staking::ActiveEraInfo
     **/
    PalletStakingActiveEraInfo: {
        index: string;
        start: string;
    };
    /**
     * Lookup357: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
     **/
    PalletStakingEraRewardPoints: {
        total: string;
        individual: string;
    };
    /**
     * Lookup361: pallet_staking::Forcing
     **/
    PalletStakingForcing: {
        _enum: string[];
    };
    /**
     * Lookup363: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingUnappliedSlash: {
        validator: string;
        own: string;
        others: string;
        reporters: string;
        payout: string;
    };
    /**
     * Lookup365: pallet_staking::slashing::SlashingSpans
     **/
    PalletStakingSlashingSlashingSpans: {
        spanIndex: string;
        lastStart: string;
        lastNonzeroSlash: string;
        prior: string;
    };
    /**
     * Lookup366: pallet_staking::slashing::SpanRecord<Balance>
     **/
    PalletStakingSlashingSpanRecord: {
        slashed: string;
        paidOut: string;
    };
    /**
     * Lookup369: pallet_staking::Releases
     **/
    PalletStakingReleases: {
        _enum: string[];
    };
    /**
     * Lookup370: pallet_staking::pallet::pallet::Error<T>
     **/
    PalletStakingPalletError: {
        _enum: string[];
    };
    /**
     * Lookup374: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup375: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup379: pallet_democracy::PreimageStatus<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    PalletDemocracyPreimageStatus: {
        _enum: {
            Missing: string;
            Available: {
                data: string;
                provider: string;
                deposit: string;
                since: string;
                expiry: string;
            };
        };
    };
    /**
     * Lookup380: pallet_democracy::types::ReferendumInfo<BlockNumber, primitive_types::H256, Balance>
     **/
    PalletDemocracyReferendumInfo: {
        _enum: {
            Ongoing: string;
            Finished: {
                approved: string;
                end: string;
            };
        };
    };
    /**
     * Lookup381: pallet_democracy::types::ReferendumStatus<BlockNumber, primitive_types::H256, Balance>
     **/
    PalletDemocracyReferendumStatus: {
        end: string;
        proposalHash: string;
        threshold: string;
        delay: string;
        tally: string;
    };
    /**
     * Lookup382: pallet_democracy::types::Tally<Balance>
     **/
    PalletDemocracyTally: {
        ayes: string;
        nays: string;
        turnout: string;
    };
    /**
     * Lookup383: pallet_democracy::vote::Voting<Balance, sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletDemocracyVoteVoting: {
        _enum: {
            Direct: {
                votes: string;
                delegations: string;
                prior: string;
            };
            Delegating: {
                balance: string;
                target: string;
                conviction: string;
                delegations: string;
                prior: string;
            };
        };
    };
    /**
     * Lookup386: pallet_democracy::types::Delegations<Balance>
     **/
    PalletDemocracyDelegations: {
        votes: string;
        capital: string;
    };
    /**
     * Lookup387: pallet_democracy::vote::PriorLock<BlockNumber, Balance>
     **/
    PalletDemocracyVotePriorLock: string;
    /**
     * Lookup390: pallet_democracy::Releases
     **/
    PalletDemocracyReleases: {
        _enum: string[];
    };
    /**
     * Lookup391: pallet_democracy::pallet::Error<T>
     **/
    PalletDemocracyError: {
        _enum: string[];
    };
    /**
     * Lookup393: pallet_collective::Votes<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletCollectiveVotes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    /**
     * Lookup394: pallet_collective::pallet::Error<T, I>
     **/
    PalletCollectiveError: {
        _enum: string[];
    };
    /**
     * Lookup398: pallet_elections_phragmen::SeatHolder<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenSeatHolder: {
        who: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup399: pallet_elections_phragmen::Voter<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenVoter: {
        votes: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup400: pallet_elections_phragmen::pallet::Error<T>
     **/
    PalletElectionsPhragmenError: {
        _enum: string[];
    };
    /**
     * Lookup401: pallet_membership::pallet::Error<T, I>
     **/
    PalletMembershipError: {
        _enum: string[];
    };
    /**
     * Lookup402: pallet_grandpa::StoredState<N>
     **/
    PalletGrandpaStoredState: {
        _enum: {
            Live: string;
            PendingPause: {
                scheduledAt: string;
                delay: string;
            };
            Paused: string;
            PendingResume: {
                scheduledAt: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup403: pallet_grandpa::StoredPendingChange<N, Limit>
     **/
    PalletGrandpaStoredPendingChange: {
        scheduledAt: string;
        delay: string;
        nextAuthorities: string;
        forced: string;
    };
    /**
     * Lookup405: pallet_grandpa::pallet::Error<T>
     **/
    PalletGrandpaError: {
        _enum: string[];
    };
    /**
     * Lookup406: pallet_treasury::Proposal<sp_core::crypto::AccountId32, Balance>
     **/
    PalletTreasuryProposal: {
        proposer: string;
        value: string;
        beneficiary: string;
        bond: string;
    };
    /**
     * Lookup409: frame_support::PalletId
     **/
    FrameSupportPalletId: string;
    /**
     * Lookup410: pallet_treasury::pallet::Error<T, I>
     **/
    PalletTreasuryError: {
        _enum: string[];
    };
    /**
     * Lookup411: pallet_contracts::wasm::PrefabWasmModule<T>
     **/
    PalletContractsWasmPrefabWasmModule: {
        instructionWeightsVersion: string;
        initial: string;
        maximum: string;
        refcount: string;
        reserved: string;
        code: string;
        originalCodeLen: string;
    };
    /**
     * Lookup413: pallet_contracts::storage::RawContractInfo<primitive_types::H256>
     **/
    PalletContractsStorageRawContractInfo: {
        trieId: string;
        codeHash: string;
        reserved: string;
    };
    /**
     * Lookup415: pallet_contracts::storage::DeletedContract
     **/
    PalletContractsStorageDeletedContract: {
        trieId: string;
    };
    /**
     * Lookup416: pallet_contracts::schedule::Schedule<T>
     **/
    PalletContractsSchedule: {
        limits: string;
        instructionWeights: string;
        hostFnWeights: string;
    };
    /**
     * Lookup417: pallet_contracts::schedule::Limits
     **/
    PalletContractsScheduleLimits: {
        eventTopics: string;
        stackHeight: string;
        globals: string;
        parameters: string;
        memoryPages: string;
        tableSize: string;
        brTableSize: string;
        subjectLen: string;
        callDepth: string;
        payloadLen: string;
        codeLen: string;
    };
    /**
     * Lookup418: pallet_contracts::schedule::InstructionWeights<T>
     **/
    PalletContractsScheduleInstructionWeights: {
        _alias: {
            r_if: string;
        };
        version: string;
        i64Const: string;
        i64Load: string;
        i64Store: string;
        select: string;
        r_if: string;
        br: string;
        brIf: string;
        brTable: string;
        brTablePerEntry: string;
        call: string;
        callIndirect: string;
        callIndirectPerParam: string;
        localGet: string;
        localSet: string;
        localTee: string;
        globalGet: string;
        globalSet: string;
        memoryCurrent: string;
        memoryGrow: string;
        i64Clz: string;
        i64Ctz: string;
        i64Popcnt: string;
        i64Eqz: string;
        i64Extendsi32: string;
        i64Extendui32: string;
        i32Wrapi64: string;
        i64Eq: string;
        i64Ne: string;
        i64Lts: string;
        i64Ltu: string;
        i64Gts: string;
        i64Gtu: string;
        i64Les: string;
        i64Leu: string;
        i64Ges: string;
        i64Geu: string;
        i64Add: string;
        i64Sub: string;
        i64Mul: string;
        i64Divs: string;
        i64Divu: string;
        i64Rems: string;
        i64Remu: string;
        i64And: string;
        i64Or: string;
        i64Xor: string;
        i64Shl: string;
        i64Shrs: string;
        i64Shru: string;
        i64Rotl: string;
        i64Rotr: string;
    };
    /**
     * Lookup419: pallet_contracts::schedule::HostFnWeights<T>
     **/
    PalletContractsScheduleHostFnWeights: {
        _alias: {
            r_return: string;
        };
        caller: string;
        address: string;
        gasLeft: string;
        balance: string;
        valueTransferred: string;
        minimumBalance: string;
        contractDeposit: string;
        blockNumber: string;
        now: string;
        weightToFee: string;
        gas: string;
        input: string;
        inputPerByte: string;
        r_return: string;
        returnPerByte: string;
        terminate: string;
        random: string;
        depositEvent: string;
        depositEventPerTopic: string;
        depositEventPerByte: string;
        debugMessage: string;
        setStorage: string;
        setStoragePerByte: string;
        clearStorage: string;
        getStorage: string;
        getStoragePerByte: string;
        transfer: string;
        call: string;
        callTransferSurcharge: string;
        callPerInputByte: string;
        callPerOutputByte: string;
        instantiate: string;
        instantiatePerInputByte: string;
        instantiatePerOutputByte: string;
        instantiatePerSaltByte: string;
        hashSha2256: string;
        hashSha2256PerByte: string;
        hashKeccak256: string;
        hashKeccak256PerByte: string;
        hashBlake2256: string;
        hashBlake2256PerByte: string;
        hashBlake2128: string;
        hashBlake2128PerByte: string;
        ecdsaRecover: string;
    };
    /**
     * Lookup420: pallet_contracts::pallet::Error<T>
     **/
    PalletContractsError: {
        _enum: string[];
    };
    /**
     * Lookup421: pallet_sudo::pallet::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup425: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
     **/
    PalletImOnlineBoundedOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup429: pallet_im_online::pallet::Error<T>
     **/
    PalletImOnlineError: {
        _enum: string[];
    };
    /**
     * Lookup432: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
     **/
    SpStakingOffenceOffenceDetails: {
        offender: string;
        reporters: string;
    };
    /**
     * Lookup434: pallet_identity::types::Registration<Balance, MaxJudgements, MaxAdditionalFields>
     **/
    PalletIdentityRegistration: {
        judgements: string;
        deposit: string;
        info: string;
    };
    /**
     * Lookup442: pallet_identity::types::RegistrarInfo<Balance, sp_core::crypto::AccountId32>
     **/
    PalletIdentityRegistrarInfo: {
        account: string;
        fee: string;
        fields: string;
    };
    /**
     * Lookup444: pallet_identity::pallet::Error<T>
     **/
    PalletIdentityError: {
        _enum: string[];
    };
    /**
     * Lookup446: pallet_society::Bid<sp_core::crypto::AccountId32, Balance>
     **/
    PalletSocietyBid: {
        who: string;
        kind: string;
        value: string;
    };
    /**
     * Lookup447: pallet_society::BidKind<sp_core::crypto::AccountId32, Balance>
     **/
    PalletSocietyBidKind: {
        _enum: {
            Deposit: string;
            Vouch: string;
        };
    };
    /**
     * Lookup449: pallet_society::VouchingStatus
     **/
    PalletSocietyVouchingStatus: {
        _enum: string[];
    };
    /**
     * Lookup453: pallet_society::Vote
     **/
    PalletSocietyVote: {
        _enum: string[];
    };
    /**
     * Lookup454: pallet_society::pallet::Error<T, I>
     **/
    PalletSocietyError: {
        _enum: string[];
    };
    /**
     * Lookup455: pallet_recovery::RecoveryConfig<BlockNumber, Balance, sp_core::crypto::AccountId32>
     **/
    PalletRecoveryRecoveryConfig: {
        delayPeriod: string;
        deposit: string;
        friends: string;
        threshold: string;
    };
    /**
     * Lookup456: pallet_recovery::ActiveRecovery<BlockNumber, Balance, sp_core::crypto::AccountId32>
     **/
    PalletRecoveryActiveRecovery: {
        created: string;
        deposit: string;
        friends: string;
    };
    /**
     * Lookup457: pallet_recovery::pallet::Error<T>
     **/
    PalletRecoveryError: {
        _enum: string[];
    };
    /**
     * Lookup460: pallet_vesting::Releases
     **/
    PalletVestingReleases: {
        _enum: string[];
    };
    /**
     * Lookup461: pallet_vesting::pallet::Error<T>
     **/
    PalletVestingError: {
        _enum: string[];
    };
    /**
     * Lookup464: pallet_scheduler::ScheduledV2<node_runtime::Call, BlockNumber, node_runtime::OriginCaller, sp_core::crypto::AccountId32>
     **/
    PalletSchedulerScheduledV2: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /**
     * Lookup465: pallet_scheduler::Releases
     **/
    PalletSchedulerReleases: {
        _enum: string[];
    };
    /**
     * Lookup466: pallet_scheduler::pallet::Error<T>
     **/
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup469: pallet_proxy::ProxyDefinition<sp_core::crypto::AccountId32, node_runtime::ProxyType, BlockNumber>
     **/
    PalletProxyProxyDefinition: {
        delegate: string;
        proxyType: string;
        delay: string;
    };
    /**
     * Lookup473: pallet_proxy::Announcement<sp_core::crypto::AccountId32, primitive_types::H256, BlockNumber>
     **/
    PalletProxyAnnouncement: {
        real: string;
        callHash: string;
        height: string;
    };
    /**
     * Lookup475: pallet_proxy::pallet::Error<T>
     **/
    PalletProxyError: {
        _enum: string[];
    };
    /**
     * Lookup477: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
     **/
    PalletMultisigMultisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    /**
     * Lookup479: pallet_multisig::pallet::Error<T>
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup480: pallet_bounties::Bounty<sp_core::crypto::AccountId32, Balance, BlockNumber>
     **/
    PalletBountiesBounty: {
        proposer: string;
        value: string;
        fee: string;
        curatorDeposit: string;
        bond: string;
        status: string;
    };
    /**
     * Lookup481: pallet_bounties::BountyStatus<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletBountiesBountyStatus: {
        _enum: {
            Proposed: string;
            Approved: string;
            Funded: string;
            CuratorProposed: {
                curator: string;
            };
            Active: {
                curator: string;
                updateDue: string;
            };
            PendingPayout: {
                curator: string;
                beneficiary: string;
                unlockAt: string;
            };
        };
    };
    /**
     * Lookup482: pallet_bounties::pallet::Error<T>
     **/
    PalletBountiesError: {
        _enum: string[];
    };
    /**
     * Lookup483: pallet_tips::OpenTip<sp_core::crypto::AccountId32, Balance, BlockNumber, primitive_types::H256>
     **/
    PalletTipsOpenTip: {
        reason: string;
        who: string;
        finder: string;
        deposit: string;
        closes: string;
        tips: string;
        findersFee: string;
    };
    /**
     * Lookup484: pallet_tips::pallet::Error<T>
     **/
    PalletTipsError: {
        _enum: string[];
    };
    /**
     * Lookup485: pallet_assets::types::AssetDetails<Balance, sp_core::crypto::AccountId32, DepositBalance>
     **/
    PalletAssetsAssetDetails: {
        owner: string;
        issuer: string;
        admin: string;
        freezer: string;
        supply: string;
        deposit: string;
        minBalance: string;
        isSufficient: string;
        accounts: string;
        sufficients: string;
        approvals: string;
        isFrozen: string;
    };
    /**
     * Lookup486: pallet_assets::types::AssetBalance<Balance, Extra>
     **/
    PalletAssetsAssetBalance: {
        balance: string;
        isFrozen: string;
        sufficient: string;
        extra: string;
    };
    /**
     * Lookup488: pallet_assets::types::Approval<Balance, DepositBalance>
     **/
    PalletAssetsApproval: {
        amount: string;
        deposit: string;
    };
    /**
     * Lookup489: pallet_assets::types::AssetMetadata<DepositBalance, frame_support::storage::bounded_vec::BoundedVec<T, S>>
     **/
    PalletAssetsAssetMetadata: {
        deposit: string;
        name: string;
        symbol: string;
        decimals: string;
        isFrozen: string;
    };
    /**
     * Lookup490: pallet_assets::pallet::Error<T, I>
     **/
    PalletAssetsError: {
        _enum: string[];
    };
    /**
     * Lookup491: pallet_lottery::LotteryConfig<BlockNumber, Balance>
     **/
    PalletLotteryLotteryConfig: {
        price: string;
        start: string;
        length: string;
        delay: string;
        repeat: string;
    };
    /**
     * Lookup494: pallet_lottery::pallet::Error<T>
     **/
    PalletLotteryError: {
        _enum: string[];
    };
    /**
     * Lookup496: pallet_gilt::pallet::GiltBid<Balance, sp_core::crypto::AccountId32>
     **/
    PalletGiltGiltBid: {
        amount: string;
        who: string;
    };
    /**
     * Lookup497: pallet_gilt::pallet::ActiveGiltsTotal<Balance>
     **/
    PalletGiltActiveGiltsTotal: {
        frozen: string;
        proportion: string;
        index: string;
        target: string;
    };
    /**
     * Lookup498: pallet_gilt::pallet::ActiveGilt<Balance, sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletGiltActiveGilt: {
        proportion: string;
        amount: string;
        who: string;
        expiry: string;
    };
    /**
     * Lookup499: pallet_gilt::pallet::Error<T>
     **/
    PalletGiltError: {
        _enum: string[];
    };
    /**
     * Lookup500: pallet_uniques::types::ClassDetails<sp_core::crypto::AccountId32, DepositBalance>
     **/
    PalletUniquesClassDetails: {
        owner: string;
        issuer: string;
        admin: string;
        freezer: string;
        totalDeposit: string;
        freeHolding: string;
        instances: string;
        instanceMetadatas: string;
        attributes: string;
        isFrozen: string;
    };
    /**
     * Lookup502: pallet_uniques::types::InstanceDetails<sp_core::crypto::AccountId32, DepositBalance>
     **/
    PalletUniquesInstanceDetails: {
        owner: string;
        approved: string;
        isFrozen: string;
        deposit: string;
    };
    /**
     * Lookup503: pallet_uniques::types::ClassMetadata<DepositBalance, StringLimit>
     **/
    PalletUniquesClassMetadata: {
        deposit: string;
        data: string;
        isFrozen: string;
    };
    /**
     * Lookup504: pallet_uniques::types::InstanceMetadata<DepositBalance, StringLimit>
     **/
    PalletUniquesInstanceMetadata: {
        deposit: string;
        data: string;
        isFrozen: string;
    };
    /**
     * Lookup507: pallet_uniques::pallet::Error<T, I>
     **/
    PalletUniquesError: {
        _enum: string[];
    };
    /**
     * Lookup509: pallet_transaction_storage::TransactionInfo
     **/
    PalletTransactionStorageTransactionInfo: {
        _alias: {
            size_: string;
        };
        chunkRoot: string;
        contentHash: string;
        size_: string;
        blockChunks: string;
    };
    /**
     * Lookup510: pallet_transaction_storage::pallet::Error<T>
     **/
    PalletTransactionStorageError: {
        _enum: string[];
    };
    /**
     * Lookup511: pallet_bags_list::list::Node<T>
     **/
    PalletBagsListListNode: {
        id: string;
        prev: string;
        next: string;
        bagUpper: string;
    };
    /**
     * Lookup512: pallet_bags_list::list::Bag<T>
     **/
    PalletBagsListListBag: {
        head: string;
        tail: string;
    };
    /**
     * Lookup515: sp_runtime::MultiSignature
     **/
    SpRuntimeMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    /**
     * Lookup516: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup519: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup520: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup521: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup524: frame_system::extensions::check_nonce::CheckNonce<T>
     **/
    FrameSystemExtensionsCheckNonce: string;
    /**
     * Lookup525: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup526: pallet_transaction_payment::ChargeTransactionPayment<T>
     **/
    PalletTransactionPaymentChargeTransactionPayment: string;
    /**
     * Lookup527: node_runtime::Runtime
     **/
    NodeRuntimeRuntime: string;
};
export default _default;
